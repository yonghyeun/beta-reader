name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # GitHub Actions에 PR에 댓글을 달 수 있는 권한 부여
    permissions:
      contents: read
      pull-requests: write
      issues: write
    defaults:
      run:
        working-directory: ./beta-reader
    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4

      # Node.js 환경 설정
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # 프로젝트 의존성 설치
      - name: Install dependencies
        run: npm install

      # Playwright 브라우저 설치
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Playwright 테스트 실행 (continue-on-error 제거)
      - name: Run Playwright tests
        run: npx playwright test
        id: playwright-test
        # continue-on-error를 제거하여 테스트 실패 시 워크플로우도 실패하도록 함

      # 테스트 결과 보고서 아티팩트로 업로드
      - uses: actions/upload-artifact@v4
        if: ${{ always() }} # 테스트 실패해도 항상 업로드
        with:
          name: playwright-report
          path: beta-reader/playwright-report/
          retention-days: 30

      # 상세 테스트 결과 추출
      - name: Extract test results
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          # 테스트 결과 파일 찾기
          REPORT_DIR="playwright-report"
          if [ -d "$REPORT_DIR" ]; then
            # HTML 결과에서 테스트 결과 추출 (실패한 테스트, 성공한 테스트 정보)
            TEST_COUNT=$(grep -r "tests=\"" $REPORT_DIR | head -1 | sed -E 's/.*tests="([0-9]+)".*/\1/')
            PASSED_COUNT=$(grep -r "passed=\"" $REPORT_DIR | head -1 | sed -E 's/.*passed="([0-9]+)".*/\1/')
            FAILED_COUNT=$(grep -r "failed=\"" $REPORT_DIR | head -1 | sed -E 's/.*failed="([0-9]+)".*/\1/')
            SKIPPED_COUNT=$(grep -r "skipped=\"" $REPORT_DIR | head -1 | sed -E 's/.*skipped="([0-9]+)".*/\1/')
            
            # 테스트 결과 요약 파일 생성
            echo "## Playwright Test Results" > test-summary.md
            
            if [ "$FAILED_COUNT" = "0" ]; then
              echo "✅ **All tests passed!**" >> test-summary.md
            else
              echo "❌ **Some tests failed!**" >> test-summary.md
            fi
            
            echo "" >> test-summary.md
            echo "### Test Summary" >> test-summary.md
            echo "- **Total Tests:** $TEST_COUNT" >> test-summary.md
            echo "- **Passed:** $PASSED_COUNT ✅" >> test-summary.md
            echo "- **Failed:** $FAILED_COUNT ❌" >> test-summary.md
            echo "- **Skipped:** $SKIPPED_COUNT ⏭️" >> test-summary.md
            
            echo "" >> test-summary.md
            echo "### Test Files" >> test-summary.md
            find e2eTests -name "*.spec.ts" | sort | while read file; do
              echo "- \`$file\`" >> test-summary.md
            done
            
            # 실패한 테스트가 있다면 세부 정보 추출
            if [ "$FAILED_COUNT" != "0" ]; then
              echo "" >> test-summary.md
              echo "### Failed Tests" >> test-summary.md
              
              # 실패한 테스트 정보 추출 시도
              FAILED_TESTS=$(grep -r "status=\"failed\"" $REPORT_DIR --include="*.xml" | sed -E 's/.*name="([^"]+)".*/- \1/' | sort -u)
              
              if [ ! -z "$FAILED_TESTS" ]; then
                echo "$FAILED_TESTS" >> test-summary.md
              else
                echo "Failed test details could not be extracted. Please check the full report artifact." >> test-summary.md
              fi
            fi
            
            echo "" >> test-summary.md
            echo "For detailed results, check the uploaded artifacts." >> test-summary.md
          else
            echo "## Playwright Test Results" > test-summary.md
            echo "❓ **Test report not found**" >> test-summary.md
            echo "" >> test-summary.md
            echo "Could not find test report directory. Please check the workflow logs for details." >> test-summary.md
          fi

      # PR에 테스트 결과 댓글 추가
      - name: Add test result comment to PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('./beta-reader/test-summary.md', 'utf8');

            // PR 번호 찾기
            const pr_number = context.issue.number;

            // 기존 댓글이 있는지 확인
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                     comment.body.includes('Playwright Test Results');
            });

            // 기존 댓글 업데이트 또는 새 댓글 추가
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testSummary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: testSummary
              });
            }

      # 임시 파일 정리
      - name: Clean up temporary files
        if: ${{ always() }}
        run: |
          if [ -f "test-summary.md" ]; then
            rm test-summary.md
            echo "Removed temporary test-summary.md file"
          fi

