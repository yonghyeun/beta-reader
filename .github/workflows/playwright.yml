name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./beta-reader
    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4

      # Node.js 환경 설정
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # 프로젝트 의존성 설치
      - name: Install dependencies
        run: npm install

      # Playwright 브라우저 설치
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Playwright 테스트 실행
      - name: Run Playwright tests
        run: npx playwright test
        id: playwright-test
        continue-on-error: true

      # 테스트 결과 보고서 아티팩트로 업로드
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: beta-reader/playwright-report/
          retention-days: 30

      # 테스트 요약 생성
      - name: Create test summary
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          echo "## Playwright Test Results" > test-summary.md
          if [ "${{ steps.playwright-test.outcome }}" == "success" ]; then
            echo "✅ All tests passed!" >> test-summary.md
          else
            echo "❌ Some tests failed. See detailed report below." >> test-summary.md
          fi
          echo "" >> test-summary.md
          echo "### Test Summary" >> test-summary.md
          npx playwright show-report --json | jq -r '.suites[] | "- **" + .title + "**: " + (.specs | map(if .ok then "✅" else "❌" end + " " + .title) | join(", "))' >> test-summary.md || echo "- Could not generate detailed test summary" >> test-summary.md

      # PR에 테스트 결과 댓글 추가
      - name: Add test result comment to PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('./beta-reader/test-summary.md', 'utf8');

            // PR 번호 찾기
            const pr_number = context.issue.number;

            // 기존 댓글이 있는지 확인
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                     comment.body.includes('Playwright Test Results');
            });

            // 기존 댓글 업데이트 또는 새 댓글 추가
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testSummary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: testSummary
              });
            }

      # 임시 파일 정리
      - name: Clean up temporary files
        if: ${{ always() }}
        run: |
          if [ -f "test-summary.md" ]; then
            rm test-summary.md
            echo "Removed temporary test-summary.md file"
          fi

